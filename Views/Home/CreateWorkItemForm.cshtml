@model WorkItemFields

<link rel="stylesheet" href="~/css/site.css" />

<form asp-action="CreateWorkItem" method="post" class="work-item-form" enctype="multipart/form-data">
    <div class="logo-container">
        <img src="@Environment.GetEnvironmentVariable("COMPANY_LOGO")" alt="Company Logo" />
    </div>

    <h2>@ViewData["FormTitle"]</h2>
    <p>@ViewData["FormDescription"]</p>

    @{
        for (var i = 1; i < 15; i++)
        {
            var currentField = Model.AllFields["FIELD_" + i];
            if (currentField != null)
            {
                @await Html.PartialAsync("_FormField", currentField)
            }
        }
    }

    @if (Model.EnableAttachments)
    {
        <!-- Attachment container -->
        <div class="attachment-container">
            <label for="fileInput">Visual Aids:</label>
            <p>Screenshots, video recordings etc</p>
            <div class="attachment-box" onclick="openFileInput()" ondragover="handleDragOver(event)" ondrop="handleDrop(event)">
                <p>Drag and drop files here or click to select files</p>
                <span id="fileInputLabel">Select Files</span>
            </div>
            <input type="file" id="fileInput" name="attachments[]" multiple onchange="displaySelectedFiles()">
        </div>
    }

    <button type="submit" class="btn btn-primary">Create Work Item</button>
</form>

<!-- JavaScript for handling drag and drop -->
<script>
    function openFileInput() {
        document.getElementById('fileInput').click();
    }

    function handleDragOver(event) {
        event.preventDefault();
        event.currentTarget.classList.add('drag-over');
    }

    function handleDrop(event) {
        event.preventDefault();
        event.currentTarget.classList.remove('drag-over');

        const files = event.dataTransfer.files;
        handleFiles(files);
    }

    function displaySelectedFiles() {
        const input = document.getElementById('fileInput');
        const files = input.files;
        handleFiles(files);
    }

    function handleFiles(files) {
        const fileInputLabel = document.getElementById('fileInputLabel');
        fileInputLabel.textContent = `${files.length} file(s) selected`;
    }
</script>

<!-- JavaScript for handling tip dialogs -->
<script>
    function handleSelectChange(fieldName, selectElement) {
        var selectedIndex = selectElement.selectedIndex;
        var selectedOption = selectElement.options[selectedIndex];
        var tipValue = selectedOption.getAttribute('data-tip');

        if (tipValue !== null) {
            // Display Bootstrap modal with the tip value
            $('#myModal').modal('show');
            // Set the modal title
            $('#myModal .modal-title').html(fieldName + ' Tip!');
            // Set the modal content
            $('#myModal .modal-body').html(tipValue);
        }
    }
</script>

<!-- Bootstrap Tip Modal Dialog -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Tip Information</h5>
            </div>
            <div class="modal-body">
                <!-- Tip Content -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>